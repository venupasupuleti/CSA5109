#include <stdio.h>

int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0) x1 += m0;

    return x1;
}

char encrypt(char p, int a, int b) {
    if (p >= 'a' && p <= 'z') {
        return ((a * (p - 'a') + b) % 26) + 'a';
    } else if (p >= 'A' && p <= 'Z') {
        return ((a * (p - 'A') + b) % 26) + 'A';
    } else {
        return p; 
    }
}

int main() {
    int a, b;
    char plaintext[100];

    printf("Enter the value of 'a' (must be coprime with 26): ");
    scanf("%d", &a);

    if (a % 2 == 0 || a % 13 == 0) {
        printf("Error: 'a' must be coprime with 26.\n");
        return 1;
    }

    printf("Enter the value of 'b': ");
    scanf("%d", &b);

    printf("Enter the plaintext: ");
    scanf(" %[^\n]s", plaintext);

    int aInverse = modInverse(a, 26);

    for (int i = 0; plaintext[i] != '\0'; i++) {
        char encryptedChar = encrypt(plaintext[i], a, b);
        printf("%c", encryptedChar);
    }

    printf("\n");

    return 0;
}
